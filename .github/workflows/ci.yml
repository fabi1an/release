name: Build and Release Electron App

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**/.gitignore'
      - '**/LICENSE'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: read

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, ubuntu-latest, windows-latest]
        node: [22]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Setup Node.js "${{ matrix.node }}.x" environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm

      - name: Setup Python environment (Mac)
        if: startsWith(matrix.os, 'macos')
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies for Flatpak
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y flatpak-builder binutils

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@master
        # Only install Snapcraft on Ubuntu
        if: startsWith(matrix.os, 'ubuntu')

      - name: Setup environment variables
        working-directory: ./app
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "HOME=\"$USERPROFILE\"" >> $GITHUB_ENV
            echo "ELECTRON_CACHE=\"$USERPROFILE/AppData/Local/electron\"" >> $GITHUB_ENV
            echo "ELECTRON_BUILDER_CACHE=\"$USERPROFILE/AppData/Local/electron-builder\"" >> $GITHUB_ENV
          else
            echo "ELECTRON_CACHE=\"$HOME/.cache/electron\"" >> $GITHUB_ENV
            echo "ELECTRON_BUILDER_CACHE=\"$HOME/.cache/electron-builder\"" >> $GITHUB_ENV
          fi

          echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV
          echo "NAME=$(jq -r '.name' package.json)" >> $GITHUB_ENV
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Cache electron modules
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: electron-cache-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('./pnpm-lock.yaml') }}

      - name: Cache electron-builder modules
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_BUILDER_CACHE }}
          key: electron-builder-cache-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('./pnpm-lock.yaml') }}

      - name: Install node dependencies
        run: ELECTRON_SKIP_BINARY_DOWNLOAD=1 pnpm install --frozen-lockfile --prefer-offline --recursive

      - name: Compile
        run: pnpm build

      - name: Move artifacts
        working-directory: ./app/dist
        run: |
          VERSION=${{ env.VERSION }}
          NAME=${{ env.NAME }}
          SHORT_SHA=${{ env.SHORT_SHA }}
          OS=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          ARCH=$(echo "${{ runner.arch }}" | tr '[:upper:]' '[:lower:]')
          mkdir -p ./artifacts
          find ./bundled -type f -name "*${VERSION}*" | while read -r FILE; do
            FILENAME="${NAME}-${VERSION}-${OS}-${ARCH}-${SHORT_SHA}.${FILE##*.}"
            mv "$FILE" "./artifacts/$FILENAME"
            echo "\`ARTIFACT\`: $FILENAME" >> $GITHUB_STEP_SUMMARY
          done
          if [[ "$OS" == "windows" ]]; then
            for DIR in "win-unpacked" "win-ia32-unpacked"; do
              if [ -d "./bundled/$DIR" ]; then
                ZIP_NAME="${NAME}-${VERSION}-${OS}-${ARCH}-${SHORT_SHA}.portable"
                7z a -tzip -mx9 "./artifacts/$ZIP_NAME.zip" "./bundled/$DIR/*"
                7z a -t7z -mx9 "./artifacts/$ZIP_NAME.7z" "./bundled/$DIR/*"
                echo "\`ARTIFACT\`: $ZIP_NAME" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

      - name: Verify artifacts
        run: |
          echo "Contents of artifacts directory:"
          ls -l ./app/dist/artifacts

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.os }}-builds
          path: ./app/dist/artifacts/*
          if-no-files-found: ignore
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@main
        with:
          path: ./artifacts
          merge-multiple: true

      - name: List Artifacts (Debugging)
        run: |
          find ./ -type f

      - name: Generate Nightly release notes
        id: generate-notes
        run: |
          SHORT_SHA=${{ env.SHORT_SHA }}
          echo "body=\"Development release for commit $SHORT_SHA\"" >> $GITHUB_OUTPUT

      - name: Update Nightly Release
        uses: andelf/nightly-release@main
        with:
          name: Development Release
          body: ${{ fromJSON(steps.generate-notes.outputs.body) }}
          tag_name: nightly
          prerelease: true
          files: |
            ./artifacts/*${{ env.VERSION }}*.AppImage
            ./artifacts/*${{ env.VERSION }}*.snap
            ./artifacts/*${{ env.VERSION }}*.dmg
            ./artifacts/*${{ env.VERSION }}*.exe
            ./artifacts/*${{ env.VERSION }}*.zip
            ./artifacts/*${{ env.VERSION }}*.7z
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
